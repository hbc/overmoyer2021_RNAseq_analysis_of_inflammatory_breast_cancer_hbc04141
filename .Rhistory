drop_na(symbol)
plotmat$ensembl_gene_id <- NULL
plotmat <- plotmat %>% column_to_rownames(var = "symbol") %>% as.matrix()
# Plot heatmap
pheatmap(plotmat,
scale = "row",
show_rownames = TRUE,
border = FALSE,
annotation = meta[, c("response"), drop = FALSE],
main = "Top 50 Up- and Down- regulated genes in Response: Yes vs No")
# Create a matrix of normalized expression
sig_up <- resTP_tb_significant %>% arrange(-log2FoldChange) %>% head(50) %>% pull(gene)
sig_down <- resTP_tb_significant %>% arrange(log2FoldChange) %>% head(50) %>% pull(gene)
sig <- c(sig_up, sig_down)
row_annotation <- gene_symbol %>%
as_tibble() %>%
dplyr::filter(gene_id %in% sig)
plotmat <- txi$abundance[c(sig_up, sig_down),] %>% as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id") %>%
left_join(gene_symbol, by = c("ensembl_gene_id" = "gene_id")) %>%
drop_na(symbol)
plotmat$ensembl_gene_id <- NULL
plotmat <- plotmat %>% column_to_rownames(var = "symbol") %>% as.matrix()
# Plot heatmap
pheatmap(plotmat,
scale = "row",
show_rownames = TRUE,
border = FALSE,
annotation = meta[, c("response"), drop = FALSE],
main = "Top 50 Up- and Down- regulated genes in Tumor_percentage_high: high vs low")
# Plot heatmap
pheatmap(plotmat,
scale = "row",
show_rownames = TRUE,
border = FALSE,
annotation = meta[, c("tumor_percentage_high"), drop = FALSE],
main = "Top 50 Up- and Down- regulated genes in Tumor_percentage_high: high vs low")
# Load library
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db")
# Load library
library(org.Hs.eg.db)
library(clusterProfiler)
BiocManager::install("clusterProfiler")
library(clusterProfiler)
## Create background dataset for hypergeometric testing using all genes tested for significance in the results
bg_genes <- resTreatment_tb$gene
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = org.Mm.eg.db,
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = org.Hg.eg.db,
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
# Load library
library(org.Hs.eg.db)
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = org.Hg.eg.db,
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
?enrichGO
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = "org.Hg.eg.db",
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
dotplot(compGO, showCategory = 25,
title = "GO (Biological Process) Enrichment Analysis for UP in Treatment (POST)")
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
compGO
dotplot(compGO,
showCategory = 25,
title = "GO (Biological Process) Enrichment Analysis for UP in Treatment (POST)")
sigTreatment_up
bg_genes
length(sigTreatment_up)
dotplot(compGO,
showCategory = 20,
title = "GO (Biological Process) Enrichment Analysis for UP in Treatment (POST)")
## Output results from GO analysis to a table
summary <- data.frame(compGO@result)
View(summary)
## Output results from GO analysis to a table
write_csv(summary, "tables/T7.treatment_up_go.csv")
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_down,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
dotplot(compGO, showCategory = 25, title = "GO (Biological Process) Enrichment Analysis for DOWN in Treatment")
## Output results from GO analysis to a table
summary <- data.frame(compGO@result)
## Output results from GO analysis to a table
summary <- data.frame(compGO@result)
write_csv(summary, "tables/T8.treatment_down_go.csv", row.names=F)
write_csv(summary, "tables/T8.treatment_down_go.csv")
### Plot PCA with name labels
pc <- plotPCA(rld,
intgroup = "treatment",
returnData = TRUE)
ggplot(pc, aes(x = PC1,
y = PC2,
color = tissue)) +
geom_point() +
geom_label(aes(label = name),
size = 4,
position = position_jitter(width = 20,
height = 20)) +
theme_bw() +
theme(plot.title = element_text(hjust = 1),
legend.position = "none") +
xlab("PC1: 34% variance") +
ylab("PC2: 32% variance") +
xlim(c(-120, 170))
ggplot(pc, aes(x = PC1,
y = PC2,
color = treatment)) +
geom_point() +
geom_label(aes(label = name),
size = 4,
position = position_jitter(width = 20,
height = 20)) +
theme_bw() +
theme(plot.title = element_text(hjust = 1),
legend.position = "none") +
xlab("PC1: 34% variance") +
ylab("PC2: 32% variance") +
xlim(c(-120, 170))
ggplot(pc, aes(x = PC1,
y = PC2,
color = treatment)) +
geom_point() +
geom_text_repel(aes(label = name),
size = 10) +
theme_bw() +
theme(plot.title = element_text(hjust = 1),
legend.position = "none") +
xlab("PC1: 34% variance") +
ylab("PC2: 32% variance") +
xlim(c(-120, 170))
ggplot(pc, aes(x = PC1,
y = PC2,
color = treatment)) +
geom_point() +
geom_text_repel(aes(label = name),
size = 10) +
theme_bw() +
theme(plot.title = element_text(hjust = 1),
legend.position = "none") +
xlab("PC1: 34% variance") +
ylab("PC2: 32% variance")
resCov <- degCovariates(log2(counts(dds)+0.5),
colData(dds))
colData(dds)
?degCovatiates
?degCovariates
mdata <- meta
View(meta)
mdata <- colData(dds) %>% dplyr::select(treatment, response, er, date_of, tumor_percentage_high)
mdata <- colData(dds) %>%  as.data.frame()  %>%
dplyr::select(treatment, response, er, date_of, tumor_percentage_high)
resCov <- degCovariates(log2(counts(dds)+0.5), mdata)
counts <- counts(dds, normalized = TRUE)
View(counts)
design <- as.data.frame(colData(dds))
degCheckFactors(counts[, 1:6])
degCheckFactors(counts[, 1:5])
degCheckFactors(counts[, 16:30])
degCheckFactors(counts[, 31:44])
ncol(counts)
degCheckFactors(counts[, 31:40])
design
degQC(counts, design[["treatment"]], pvalue = res[["pvalue"]])
res <- results(dds)
degQC(counts, design[["treatment"]], pvalue = res[["pvalue"]])
degQC(counts, design[["treatment"]], pvalue = res[["pvalue"]])
degQC(counts, design[["response"]], pvalue = res[["pvalue"]])
degQC(counts, design[["er"]], pvalue = res[["pvalue"]])
degQC(counts, design[["tumor_percentage_hight"]], pvalue = res[["pvalue"]])
degQC(counts, design[["tumor_percentage_high"]], pvalue = res[["pvalue"]])
cor <- degCorCov(colData(dds))
cor <- degCorCov(mdata)
cor <- degCorCov(mdata)
createReport(colData(dds)[["treatment"]],
counts(dds, normalized = TRUE),
row.names(res)[1:20], res[["pvalue"]],
path = "./data")
?createReport
createReport(colData(dds)[["treatment"]],
counts(dds, normalized = TRUE),
row.names(res)[1:20], res[["pvalue"]],
path = "./data",
name = "treatment.html")
createReport(colData(dds)[["tumor_percentage_hight"]],
counts(dds, normalized = TRUE),
row.names(res)[1:20], res[["pvalue"]],
path = "./data",
name = "tumor_percentage_high.html")
createReport(colData(dds)[["tumor_percentage_high"]],
counts(dds, normalized = TRUE),
row.names(res)[1:20], res[["pvalue"]],
path = "./data",
name = "tumor_percentage_high.html")
pc
pc$PC1
mdata %>% ggplot(aes(treatment, tumor_percentage_high)) + geom_point()
mdata %>% dplyr::select(treatment, tumor_percentage_high)
mdata$tumor_percentage_high %>% table()
mdata %>% dplyr::select(date_of, response)
mdata %>% ggplot(aes(date_of, response)) + geom_col()
mdata %>% ggplot(aes(date_of, response)) + geom_bar()
mdata %>% ggplot(aes(date_of, response)) + geom_col()
mdata %>% ggplot(aes(date_of, response)) + geom_bar()
mdata %>% ggplot(aes(date_of, response)) + geom_col()
mdata %>% ggplot(aes(date_of, response)) + geom_bar(position = "dodge2")
mdata %>% ggplot(aes(date_of, response)) + geom_col(position = "dodge2")
mdata %>% ggplot(aes(date_of, fill = response)) + geom_col(position = "dodge2")
mdata %>% ggplot(aes(date_of, fill = response)) + geom_bar(position = "dodge2")
# Plot heatmap
pheatmap(rld_cor, annotation = annotation, border=NA, color = heat.colors)
# Plot heatmap
pheatmap(rld_cor,
annotation = annotation,
border=NA)
?pheatmap
# Plot heatmap
pheatmap(rld_cor,
annotation = annotation,
border = NA,
fontsize = 15)
# Plot heatmap
pheatmap(rld_cor,
annotation = annotation,
border = NA,
fontsize = 20)
?results
d <- plotCounts(dds,
gene = "ENSG00000130234",
intgroup = "treatment",
returnData = TRUE) + ggtitle("ACE2")
d <- plotCounts(dds,
gene = "ENSG00000130234",
intgroup = "treatment",
returnData = TRUE)
ggplot(d, aes(x = age, y = count, color = age)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("ACE2") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_log10()
ggplot(d, aes(x = treatment, y = count, color = treatment)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw() +
ggtitle("ACE2") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_log10()
ggplot(d, aes(x = treatment, y = count, color = treatment)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw(base_size = 10) +
ggtitle("ACE2") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_log10()
ggplot(d, aes(x = treatment, y = count, color = treatment)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw(base_size = 10) +
ggtitle("ACE2") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_log10()
mdata %>% ggplot(aes(tumor_percentage_high)) + geom_bar(position = "dodge2")
mdata %>% ggplot(aes(tumor_percentage_high), fill = response) + geom_bar(position = "dodge2")
mdata %>% ggplot(aes(tumor_percentage_high, fill = response)) + geom_bar(position = "dodge2")
contrast <- c("date_of", "20180323", "20180228")
resDO <- results(dds, contrast = contrast, alpha = 0.05)
length(which(resDO$padj < 0.05))
# Add annotations
resDO_tb <- resDO %>%
data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id"))
contrast <- c("date_of", "20180323", "20180228")
resDO <- results(dds, contrast = contrast, alpha = 0.05)
# Add annotations
resDO_tb <- resDO %>%
data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id"))
resDO_tb_significant <- dplyr::filter(resDO_tb, padj < 0.05)
samples_23 <- meta %>% dplyr::filter(date_of == "20180323") %>% row.names()
counts_23 <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples_23)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(counts_23) <- c("ensembl_gene_id", "20180323_expression_mean_tpm")
samples_28 <- meta %>% dplyr::filter(date_of == "20180228") %>% row.names()
counts_28 <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples_28)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(counts_low) <- c("ensembl_gene_id", "20180228_expression_mean_tpm")
counts_23 <-counts_23 %>%
left_join(counts_23,
by = c("ensembl_gene_id" = "ensembl_gene_id"))
resDO_tb_significant <- resDO_tb_significant %>%
left_join(counts_23, by = c("gene" = "ensembl_gene_id"))
write_csv(resDO_tb_significant,
"tables/T7.DE_dete_of.csv")
# Separate into up and down-regulated gene sets
sigDO_up <- rownames(resDO)[which(resDO$padj < 0.01 & resDO$log2FoldChange > 0)]
sigDO_down <- rownames(resDO)[which(resDO$padj < 0.01 & resDO$log2FoldChange < 0)]
# Add a column for significant genes
resER_tb <- resER_tb %>% mutate(threshold = padj < 0.01)
# Add a column for significant genes
resER_tb <- resER_tb %>% mutate(threshold = padj < 0.01)
## Volcano plot
ggplot(resER_tb) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
ggtitle("ER: Positive vs Negative") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
scale_x_continuous(limits = c(-10,10)) +
scale_y_continuous(limits = c(0, 7.5))
## Volcano plot
ggplot(resER_tb) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
ggtitle("ER: Positive vs Negative") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
scale_x_continuous(limits = c(-10,10)) +
scale_y_continuous(limits = c(0, 7.5)) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
## Volcano plot
ggplot(resER_tb) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
ggtitle("ER: Positive vs Negative") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
scale_x_continuous(limits = c(-10,10)) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
## Volcano plot
ggplot(resResponse_tb) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
ggtitle("Response Yes vs No") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
scale_x_continuous(limits = c(-10,10)) +
scale_y_continuous(limits = c(0, 7.5))+
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
# Add a column for significant genes
resTP_tb <- resTP_tb %>% mutate(threshold = padj < 0.01)
# Add a column for significant genes
resTP_tb <- resTP_tb %>% mutate(threshold = padj < 0.01)
ggplot(resTP_tb) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
ggtitle("Tumor_percentage_high: High vs Low") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
scale_x_continuous(limits = c(-10,10)) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
# Add a column for significant genes
resDO_tb <- resDO_tb %>% mutate(threshold = padj < 0.01)
# Add a column for significant genes
resDO_tb <- resDO_tb %>% mutate(threshold = padj < 0.01)
ggplot(resDO_tb) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
ggtitle("Dafe of: 20180323 vs 20180228") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
scale_x_continuous(limits = c(-10,10)) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
## Create background dataset for hypergeometric testing using all genes tested for significance in the results
bg_genes <- resTreatment_tb$gene
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
## Output results from GO analysis to a table
summary <- data.frame(compGO@result)
write_csv(summary, "tables/T8.go.treatment_up.csv")
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigTreatment_down,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
## Output results from GO analysis to a table
summary <- data.frame(compGO@result)
write_csv(summary, "tables/T9.go.treatment_down.csv")
bg_genes <- resResponse_tb$gene
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigResponse_up_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigResponse_up,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
## Output results from GO analysis to a table
summary <- data.frame(compGO@result)
write_csv(summary, "tables/T10.go.response_up.csv")
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigResponse_down,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
## Run GO enrichment analysis
compGO <- enrichGO(gene = sigResponse_down,
universe = bg_genes,
keyType = "ENSEMBL",
OrgDb = "org.Hs.eg.db",
ont = "BP",
qvalueCutoff  = 0.05,
pAdjustMethod = "BH")
write_csv(summary, "tables/T10.go.response_up.csv")
`
)
``
''
)
sd
sdf
)''
""
"
``
?plotPCA
library(ggfortify)
install.packages("ggfortify")
project.pca <- prcomp(t(assay(dds)[select,]))
rv <- rowVars(assay(dds))
# select the ntop genes by variance
select <- order(rv, decreasing=TRUE)[seq_len(min(ntop, length(rv)))]
rv <- rowVars(assay(dds))
# select the ntop genes by variance
ntop <- 500
select <- order(rv, decreasing=TRUE)[seq_len(min(ntop, length(rv)))]
project.pca <- prcomp(t(assay(dds)[select,]))
autoplot(prcomp(t(assay(dds)[select,])), x=3, y=4, data=mdata ,colour = 'genotype')
autoplot(prcomp(t(assay(dds)[select,])), x=3, y=4, data=colData(dds) ,colour = 'genotype')
?pheatmap
mdata %>% ggplot(aes(tumor_percentage_high, fill = treatment)) + geom_bar(position = "dodge2")
colnames(meta)
