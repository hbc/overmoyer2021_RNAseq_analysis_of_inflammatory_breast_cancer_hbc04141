left_join(counts_yes, by = c("gene" = "ensembl_gene_id")) %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
write_xlsx(list(T1.res_pCR = res_pCR,
T2.res_pCR_post = res_pCR_post,
T3.res_nonpCR_post = res_nonpCR_post,
T4.res_pCR_diff = res_pCR_diff),
path = "tables/paired_test.xlsx")
intersect(res_pCR_post$gene, res_pCR$gene) %>% length()
intersect(res_pCR_post$gene, res_pCR$gene) %>% head()
meta$response
d <- plotCounts(dds,
gene = "ENSG00000130234",
intgroup = "treatment",
returnData = TRUE)
d <- plotCounts(dds,
gene = "ENSG00000006634",
intgroup = "treatment",
returnData = TRUE)
ggplot(d, aes(x = treatment, y = count, color = treatment)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw(base_size = 10) +
ggtitle("ACE2") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_log10()
d <- plotCounts(dds,
gene = "ENSG00000006634",
intgroup = "response",
returnData = TRUE)
ggplot(d, aes(x = response, y = count, color = response)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
geom_text_repel(aes(label = rownames(d))) +
theme_bw(base_size = 10) +
ggtitle("ACE2") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_log10()
meta
nrow(meta)
head(meta)
samples_npCR_day1 <- meta %>% dplyr::filter(response == "non-pCR" &
treatment == "pre") %>% row.names()
samples_npCR_pre <- meta %>% dplyr::filter(response == "non-pCR" &
treatment == "pre") %>% row.names()
samples_npCR_pre
test <- txi$abundance
View(test)
test["ENSG00000006634",]
# Get results for treatment
resultsNames(dds)
samples_npCR_pre <- meta %>% dplyr::filter(response == "non-pCR" &
treatment == "pre") %>% row.names()
samples_npCR_pre <- meta %>% dplyr::filter(response == "non-pCR" &
treatment == "pre") %>% row.names()
counts_no <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples_npCR_pre)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(counts_no) <- c("ensembl_gene_id", "non-pCR_pre_mean_tpm")
counts_npCR_pre <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples_npCR_pre)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(counts_npCR_pre) <- c("ensembl_gene_id", "non-pCR_pre_mean_tpm")
View(counts_npCR_pre)
counts_npCR_pre$`non-pCR_pre_mean_tpm` <- round(counts_npCR_pre$`non-pCR_pre_mean_tpm`, 2)
View(counts_npCR_pre)
column_name <- "non-pCR_pre_mean_tpm"
samples_npCR_pre <- meta %>% dplyr::filter(response == "non-pCR" &
treatment == "pre") %>% row.names()
samples <- samples_npCR_pre
samples
tpm_counts <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(tpm_counts) <- c("ensembl_gene_id", column_name)
tpm_counts <- tpm_counts %>% dplyr::mutate (column_name := round(!!column_name))
tpm_counts <- tpm_counts %>% dplyr::mutate (column_name := round(!column_name))
tpm_counts <- tpm_counts %>% dplyr::mutate (column_name := round(!!column_name, 2))
tpm_counts <- tpm_counts %>% dplyr::mutate (column_name := round(!column_name, 2))
tpm_counts <- tpm_counts %>% dplyr::mutate (!!column_name := round(!!column_name, 2))
tpm_counts <- tpm_counts %>% dplyr::mutate (!!column_name := round(non-pCR_pre_mean_tpm, 2))
tpm_counts <- tpm_counts %>% dplyr::mutate (column_name := round(non-pCR_pre_mean_tpm, 2))
tpm_counts <- tpm_counts %>% dplyr::mutate (column_name := round(`non-pCR_pre_mean_tpm`, 2))
View(tpm_counts)
tpm_counts <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
tpm_counts <- tpm_counts %>% dplyr::mutate("{column_name}" := round(`non-pCR_pre_mean_tpm`, 2))
colnames(tpm_counts) <- c("ensembl_gene_id", column_name)
tpm_counts <- tpm_counts %>% dplyr::mutate("{column_name}" := round(`non-pCR_pre_mean_tpm`, 2))
View(tpm_counts)
tpm_counts <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(tpm_counts) <- c("ensembl_gene_id", column_name)
tpm_counts <- tpm_counts %>% dplyr::mutate("{column_name}" := round("{column_name}", 2))
tpm_counts <- tpm_counts %>% dplyr::mutate("{column_name}" := round(column_name, 2))
tpm_counts <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(tpm_counts) <- c("ensembl_gene_id", "tpm")
tpm_counts <- tpm_counts %>%
dplyr::mutate("{column_name}" := round(tpm, 2)) %>%
dplyr::select(-tpm)
get_counts_for_samples <- function(samples, column_name){
tpm_counts <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(tpm_counts) <- c("ensembl_gene_id", "tpm")
tpm_counts <- tpm_counts %>%
dplyr::mutate("{column_name}" := round(tpm, 2)) %>%
dplyr::select(-tpm)
return(tpm_counts)
}
samples_npCR_pre <- meta %>% dplyr::filter(response == "non-pCR" &
treatment == "pre") %>% row.names()
tpm_npCR_pre <- get_counts_for_samples(samples_npCR_pre, "non-pCR_pre_mean_tpm" )
View(tpm_npCR_pre)
tpm_counts <- tpm_npCR_pre %>%
left_join(tpm_npCR_post,
by = c("ensembl_gene_id" = "ensembl_gene_id"))
tpm_npCR_post <- get_counts_for_samples(samples_npCR_post, "non-pCR_post_mean_tpm" )
samples_npCR_post <- meta %>% dplyr::filter(response == "pCR" &
treatment == "post") %>%
row.names()
tpm_npCR_post <- get_counts_for_samples(samples_npCR_post, "non-pCR_post_mean_tpm" )
tpm_counts <- tpm_npCR_pre %>%
left_join(tpm_npCR_post,
by = c("ensembl_gene_id" = "ensembl_gene_id"))
samples_npCR_post <- meta %>% dplyr::filter(response == "non-pCR" &
treatment == "post") %>%
row.names()
tpm_npCR_post <- get_counts_for_samples(samples_npCR_post, "non-pCR_post_mean_tpm" )
tpm_counts <- tpm_npCR_pre %>%
left_join(tpm_npCR_post,
by = c("ensembl_gene_id" = "ensembl_gene_id"))
samples_pCR_pre <- meta %>% dplyr::filter(response == "pCR" &
treatment == "pre") %>%
row.names()
tpm_pCR_pre <- get_counts_for_samples(samples_pCR_pre, "pCR_pre_mean_tpm" )
samples_pCR_post <- meta %>% dplyr::filter(response == "pCR" &
treatment == "post") %>%
row.names()
tpm_pCR_post <- get_counts_for_samples(samples_pCR_post, "pCR_post_mean_tpm" )
tpm_counts <- tpm_counts %>%
left_join(tpm_pCR_pre,
by = c("ensembl_gene_id" = "ensembl_gene_id")) %>%
left_join(tpm_pCR_post,
by = c("ensembl_gene_id" = "ensembl_gene_id"))
# 1425
res_pCR <- results(dds, name = "responsepCR") %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id")) %>%
dplyr::filter(padj < 0.05) %>%
left_join(counts_yes, by = c("gene" = "ensembl_gene_id")) %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
# 2320
res_pCR_post <- results(dds, name = "responsepCR.treatmentpost") %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id")) %>%
dplyr::filter(padj < 0.05) %>%
left_join(tpm_counts, by = c("gene" = "ensembl_gene_id")) %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
# 1425
res_pCR <- results(dds, name = "responsepCR") %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id")) %>%
dplyr::filter(padj < 0.05) %>%
left_join(tpm_counts, by = c("gene" = "ensembl_gene_id")) %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
# 2424
res_nonpCR_post <- results(dds, name = "responsenon.pCR.treatmentpost") %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id")) %>%
dplyr::filter(padj < 0.05) %>%
left_join(tpm_counts, by = c("gene" = "ensembl_gene_id")) %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
# 23
res_pCR_diff <- results(dds, contrast = list("responsepCR.treatmentpost", "responsenon.pCR.treatmentpost")) %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id")) %>%
dplyr::filter(padj < 0.05) %>%
left_join(tpm_counts, by = c("gene" = "ensembl_gene_id")) %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
write_xlsx(list(T1.res_pCR = res_pCR,
T2.res_pCR_post = res_pCR_post,
T3.res_nonpCR_post = res_nonpCR_post,
T4.res_pCR_diff = res_pCR_diff),
path = "tables/paired_test.xlsx")
length(intersect(res_pCR_post$gene, res_nonpCR_post$gene))
head(intersect(res_pCR_post$gene, res_nonpCR_post$gene)
)
# 1425
res_pCR <- results(dds, name = "responsepCR") %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id")) %>%
dplyr::filter(padj < 0.05) %>%
left_join(tpm_counts, by = c("gene" = "ensembl_gene_id")) %>%
comb_de_result_table()
# get rid of
comb_de_result_table <- function(results){
results <- results %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
return(results)
}
# 1425
res_pCR <- results(dds, name = "responsepCR") %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id")) %>%
dplyr::filter(padj < 0.05) %>%
left_join(tpm_counts, by = c("gene" = "ensembl_gene_id")) %>%
comb_de_result_table()
View(res_pCR)
library(VariantAnnotation)
?VcfFile
??VcfFile
getwd()
# Add a column for significant genes
res_pCR_post <- res_pCR_post %>% mutate(threshold = padj < 0.01)
## Volcano plot
ggplot(res_pCR_post) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
ggtitle("Treatment Post vs Pre") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
scale_x_continuous(limits = c(-10,10)) +
scale_y_continuous(limits = c(0, 2.5)) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
## Volcano plot
ggplot(res_pCR_post) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold)) +
ggtitle("pCR post") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
scale_x_continuous(limits = c(-10,10)) +
scale_y_continuous(limits = c(0, 2.5)) +
theme(legend.position = "none",
plot.title = element_text(size = rel(1.5), hjust = 0.5),
axis.title = element_text(size = rel(1.25)))
View(res_pCR_post)
res_pCR_post$log2FoldChange
res_pCR_post$padj
-log10(res_pCR_post$padj)
# 2320
res_pCR_post <- results(dds, name = "responsepCR.treatmentpost") %>%
as.data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id")) %>%
dplyr::filter(padj < 0.05) %>%
left_join(tpm_counts, by = c("gene" = "ensembl_gene_id"))
# for excel we need strings, for volcano - numbers
re_pCR_post_xls <- res_pCR_post %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
# Separate into up and down-regulated gene sets
sig_pCR_post_up <- rownames(res_pCR_post)[which(res_pCR_post$padj < 0.01 &
res_pCR_post$log2FoldChange > 0)]
sig_pCR_post_down <- rownames(res_pCR_post)[which(res_pCR_post$padj < 0.01 &
res_pCR_post$log2FoldChange < 0)]
d <- plotCounts(dds,
gene = "ENSG00000006634",
intgroup = "responsepCR.treatmentpost",
returnData = TRUE)
colData(dds)
setwd("~/Desktop/code/1_bulk_rnaseq/overmoyer2021_RNAseq_analysis_of_inflammatory_breast_cancer_hbc04141/")
# Load library
library(org.Hs.eg.db)
# Load library
library(org.Hs.eg.db)
library(clusterProfiler)
remove_cases_2_19 <- TRUE
rebuild_rds <- FALSE
## Setup
### Bioconductor and CRAN libraries used
library(DESeq2)
library(tidyverse)
library(RColorBrewer)
library(pheatmap)
library(DEGreport)
library(DEGreport)
library(tximport)
library(ggplot2)
library(ggrepel)
library(knitr)
library(AnnotationHub)
library(AnnotationHub)
library(ensembldb)
library(ggplotify)
library(writexl)
ggplot2::theme_set(theme_light(base_size = 14))
opts_chunk[["set"]](
cache = FALSE,
dev = c("png", "pdf"),
error = TRUE,
highlight = TRUE,
message = FALSE,
prompt = FALSE,
tidy = FALSE,
warning = FALSE)
# Have a folder called `data`, and copy your Salmon folders here from the cluster.
## List all directories containing data
### change the pattern to something specific to your Salmon folders
samples <- list.files(path = "./data/final",
full.names = T,
pattern = "^S")
## Obtain a vector of all filenames including the path
files <- file.path(samples, "salmon", "quant.sf")
files
## Since all quant files have the same name it is useful to have names for each element
### change the string in str_replace so the pattern matches your filenames
names(files) <- str_replace(samples, "./data/final/", "")
# Load the data and metadata
meta <- read_csv("tables/metadata_corrected.csv") %>%
column_to_rownames(var = "samplename")
meta$response <- str_replace(meta$response, "Yes", "pCR")
meta$response <- str_replace(meta$response, "No", "non-pCR")
protein_coding_genes <- read_csv("tables/ensembl_w_description.protein_coding.csv")
annotation_file <- "data/ensembl94_hg38_annotations.txt"
gene_symbol_file <- "data/gene_symbol.txt"
hsdb <- read_tsv(annotation_file)
gene_symbol <- read_tsv(gene_symbol_file)
# Read in  a tx2gene file with transcript identifiers in the first column and gene identifiers in the second column
tx2gene <- hsdb[, c("tx_id", "gene_id")]
txi <- readRDS(txi_file)
# Run tximport
txi_file <- "data/txi.RDS"
txi <- readRDS(txi_file)
# Look at the counts
class(txi)
attributes(txi)
txi$counts %>% View()
# Run tximport
txi_file <- "data/rds_20cases/txi.RDS"
txi <- tximport(files,
type = "salmon",
tx2gene = tx2gene,
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = FALSE)
txi <- readRDS(txi_file)
# Look at the counts
class(txi)
attributes(txi)
txi$counts %>% View()
# Run tximport
txi_file <- "data/rds_20cases/txi.RDS"
txi <- readRDS(txi_file)
ncol(txi$counts)
rebuild_rds <- TRUE
dim(txi$counts)
### Check that sample names match in both files
all(colnames(txi$counts) %in% rownames(meta))
### Check that sample names match in both files
all(colnames(txi$counts) %in% rownames(meta))
### Check that all samples are in the same order
meta <- meta[colnames(txi$counts),]
all(colnames(txi$counts) == rownames(meta))
## Create DESeq2Dataset object
dds_file <- "data/rds_20cases/dds.RDS"
meta$treatment <- as.factor(meta$treatment)
meta$treatment <- relevel(meta$treatment, "pre")
meta$response <- as.factor(meta$response)
meta$er <- as.factor(meta$er)
meta$date_of <- as.factor(meta$date_of)
meta$tumor_percentage <- as.factor(meta$tumor_percentage)
meta$tumor_percentage_high <- as.factor(meta$tumor_percentage_high)
meta$tumor_percentage_high <- relevel(meta$tumor_percentage_high, "low")
meta$study_id <- as.factor(meta$study_id)
non_responders <- meta %>% dplyr::filter(study_id %in% c(2, 19)) %>% row.names()
dds <- readRDS(dds_file)
get_counts_for_samples <- function(samples, column_name){
tpm_counts <- txi$abundance %>%
as.data.frame() %>%
dplyr::select(any_of(samples)) %>%
rowMeans() %>%
as.data.frame() %>%
rownames_to_column(var = "ensembl_gene_id")
colnames(tpm_counts) <- c("ensembl_gene_id", "tpm")
tpm_counts <- tpm_counts %>%
dplyr::mutate("{column_name}" := round(tpm, 2)) %>%
dplyr::select(-tpm)
return(tpm_counts)
}
comb_de_result_table <- function(results){
results <- results %>%
mutate(baseMean = round(baseMean, 2),
log2FoldChange = round(log2FoldChange, 2),
lfcSE = round(lfcSE, 2),
stat = round(stat, 2),
pvalue = format(pvalue, scientific = TRUE, digits = 2),
padj = format(padj, scientific = TRUE, digits = 2))
return(results)
}
counts <- counts(dds, normalized = TRUE)
design <- as.data.frame(colData(dds))
degCheckFactors(counts[, 1:5])
res <- results(dds)
degQC(counts, design[["treatment"]], pvalue = res[["pvalue"]])
degQC(counts, design[["response"]], pvalue = res[["pvalue"]])
mdata %>% ggplot(aes(date_of, fill = response)) +
geom_bar(position = "dodge2") +
ggtitle("Distribution of samples across dates of sequencing")
mdata %>% ggplot(aes(tumor_percentage_high, fill = treatment)) + geom_bar(position = "dodge2")
mdata <- colData(dds) %>%  as.data.frame() %>%
dplyr::select(treatment, response, er, date_of, tumor_percentage_high)
mdata %>% ggplot(aes(tumor_percentage_high, fill = response)) +
geom_bar(position = "dodge2") +
ggtitle("Samples in each category")
mdata %>% ggplot(aes(tumor_percentage_high, fill = treatment)) + geom_bar(position = "dodge2")
# Get results for treatment
contrast <- c("treatment", "post", "pre")
resTreatment <- results(dds, contrast = contrast, alpha = 0.05)
length(which(resTreatment$padj < 0.05))
# Get results for rescue vs wt
contrast <- c("response", "pCR", "non-pCR")
resResponse <- results(dds, contrast = contrast, alpha = 0.05)
length(which(resResponse$padj < 0.05))
# Add annotations
resResponse_tb <- resResponse %>%
data.frame() %>%
rownames_to_column(var = "gene") %>%
as_tibble() %>%
left_join(gene_symbol, by = c("gene" = "gene_id"))
resResponse_tb_significant <- dplyr::filter(resResponse_tb, padj < 0.05)
samples_no <- meta %>% dplyr::filter(response == "non-pCR") %>% row.names()
tpm_no <- get_counts_for_samples(samples_no, "non-pCR_mean_tpm")
samples_yes <- meta %>% dplyr::filter(response == "pCR") %>% row.names()
tpm_yes <- get_counts_for_samples(samples_yes, "pCR_mean_tpm")
tpm_counts <- tpm_yes %>% left_join(tpm_no,
by = c("ensembl_gene_id" = "ensembl_gene_id"))
resResponse_tb_significant <- resResponse_tb_significant %>%
left_join(tpm_counts, by = c("gene" = "ensembl_gene_id")) %>%
comb_de_result_table()
write_xlsx(list(T4.DE_response = resResponse_tb_significant),
"tables/T4.DE_response.xlsx")
# Separate into up and down-regulated gene sets
sigResponse_up <- rownames(resResponse)[which(resResponse$padj < 0.01 & resResponse$log2FoldChange > 0)]
sigResponse_down <- rownames(resResponse)[which(resResponse$padj < 0.01 & resResponse$log2FoldChange < 0)]
